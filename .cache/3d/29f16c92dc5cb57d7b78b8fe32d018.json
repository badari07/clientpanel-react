{"id":"../node_modules/react-redux-firebase/es/utils/auth.js","dependencies":[{"name":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/utils/auth.js.map","includedInParent":true,"mtime":1586117796730},{"name":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/package.json","includedInParent":true,"mtime":1586189507230},{"name":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/.babelrc","includedInParent":true,"mtime":1586188670110},{"name":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/package.json","includedInParent":true,"mtime":1586117798920},{"name":"lodash/capitalize","loc":{"line":1,"column":464},"parent":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/utils/auth.js","resolved":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/lodash/capitalize.js"},{"name":"../constants","loc":{"line":1,"column":505},"parent":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/utils/auth.js","resolved":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/constants.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.getLoginMethodAndParams=getLoginMethodAndParams,exports.getReauthenticateMethodAndParams=getReauthenticateMethodAndParams,exports.authIsReady=authIsReady,exports.createAuthIsReady=createAuthIsReady,exports.updateProfileOnRTDB=updateProfileOnRTDB,exports.updateProfileOnFirestore=updateProfileOnFirestore,exports.setupPresence=setupPresence;var _capitalize2=_interopRequireDefault(require(\"lodash/capitalize\")),_constants=require(\"../constants\");function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function createAuthProvider(firebase,providerName,scopes){if(\"microsoft.com\"===providerName.toLowerCase()){var _provider=new firebase.auth.OAuthProvider(\"microsoft.com\");return _provider}var capitalProviderName=\"\".concat((0,_capitalize2.default)(providerName),\"AuthProvider\");if(!firebase.auth[capitalProviderName])throw new Error(\"\".concat(providerName,\" is not a valid auth provider for your firebase instance. If using react-native, use a RN specific auth library.\"));var provider=new firebase.auth[capitalProviderName],customAuthParameters=firebase._.config.customAuthParameters;return(customAuthParameters&&customAuthParameters[providerName]&&provider.setCustomParameters(customAuthParameters[providerName]),\"twitter\"===providerName.toLowerCase()||\"function\"!=typeof provider.addScope)?provider:(provider.addScope(\"email\"),scopes&&(Array.isArray(scopes)&&scopes.forEach(function(scope){provider.addScope(scope)}),(\"string\"==typeof scopes||scopes instanceof String)&&provider.addScope(scopes)),provider)}function getLoginMethodAndParams(firebase,credentials){var email=credentials.email,password=credentials.password,provider=credentials.provider,type=credentials.type,token=credentials.token,scopes=credentials.scopes,phoneNumber=credentials.phoneNumber,applicationVerifier=credentials.applicationVerifier,credential=credentials.credential;if(credential){var credentialAuth=firebase.auth().signInAndRetrieveDataWithCredential;return credentialAuth?{method:\"signInAndRetrieveDataWithCredential\",params:[credential]}:{method:\"signInWithCredential\",params:[credential]}}if(provider){if(-1===_constants.supportedAuthProviders.indexOf(provider.toLowerCase()))throw new Error(\"\".concat(provider,\" is not a valid Auth Provider\"));if(token)throw new Error(\"provider with token no longer supported, use credential parameter instead\");var authProvider=createAuthProvider(firebase,provider,scopes);return\"popup\"===type?{method:\"signInWithPopup\",params:[authProvider]}:{method:\"signInWithRedirect\",params:[authProvider]}}if(token){var tokenAuth=firebase.auth().signInAndRetrieveDataWithCustomToken;return tokenAuth?{method:\"signInAndRetrieveDataWithCustomToken\",params:[token]}:{method:\"signInWithCustomToken\",params:[token]}}if(phoneNumber){if(!applicationVerifier)throw new Error(\"Application verifier is required for phone authentication\");return{method:\"signInWithPhoneNumber\",params:[phoneNumber,applicationVerifier]}}return firebase.auth().signInWithEmailAndPassword?{method:\"signInWithEmailAndPassword\",params:[email,password]}:{method:\"signInAndRetrieveDataWithEmailAndPassword\",params:[email,password]}}function getReauthenticateMethodAndParams(firebase,credentials){var provider=credentials.provider,type=credentials.type,scopes=credentials.scopes,phoneNumber=credentials.phoneNumber,applicationVerifier=credentials.applicationVerifier,credential=credentials.credential;if(credential){var credentialAuth=firebase.auth().reauthenticateAndRetrieveDataWithCredential;return credentialAuth?{method:\"reauthenticateAndRetrieveDataWithCredential\",params:[credential]}:{method:\"reauthenticateWithCredential\",params:[credential]}}if(provider){if(-1===_constants.supportedAuthProviders.indexOf(provider.toLowerCase()))throw new Error(\"\".concat(provider,\" is not a valid Auth Provider\"));var authProvider=createAuthProvider(firebase,provider,scopes);return\"popup\"===type?{method:\"reauthenticateWithPopup\",params:[authProvider]}:{method:\"reauthenticateWithRedirect\",params:[authProvider]}}if(!applicationVerifier)throw new Error(\"Application verifier is required for phone authentication\");return{method:\"reauthenticateWithPhoneNumber\",params:[phoneNumber,applicationVerifier]}}function isAuthReady(store,stateName){var state=store.getState(),firebaseState=stateName?state[stateName]:state,firebaseAuthState=firebaseState&&firebaseState.auth;if(!firebaseAuthState)throw new Error(\"The Firebase auth state could not be found in the store under the attribute '\".concat(stateName?\"\".concat(stateName,\".\"):\"\",\"auth'. Make sure your react-redux-firebase reducer is correctly set in the store\"));return firebaseState.auth.isLoaded}function authIsReady(store){var stateName=1<arguments.length&&arguments[1]!==void 0?arguments[1]:\"firebase\";return new Promise(function(resolve){if(isAuthReady(store,stateName))resolve();else var unsubscribe=store.subscribe(function(){isAuthReady(store,stateName)&&(unsubscribe(),resolve())})})}function createAuthIsReady(store,config){return\"function\"==typeof config.authIsReady?config.authIsReady(store,config):authIsReady(store,config.firebaseStateName)}function updateProfileOnRTDB(firebase,profileUpdate){var _firebase$_=firebase._,config=_firebase$_.config,authUid=_firebase$_.authUid,profileRef=firebase.database().ref(\"\".concat(config.userProfile,\"/\").concat(authUid));return profileRef.update(profileUpdate).then(function(){return profileRef.once(\"value\")})}function updateProfileOnFirestore(firebase,profileUpdate){var options=2<arguments.length&&arguments[2]!==void 0?arguments[2]:{},_options$useSet=options.useSet,_options$merge=options.merge,firestore=firebase.firestore,_firebase$_2=firebase._,config=_firebase$_2.config,authUid=_firebase$_2.authUid,profileRef=firestore().doc(\"\".concat(config.userProfile,\"/\").concat(authUid)),profileUpdatePromise=!(void 0!==_options$useSet)||_options$useSet?profileRef.set(profileUpdate,{merge:!(void 0!==_options$merge)||_options$merge}):profileRef.update(profileUpdate);return profileUpdatePromise.then(function(){return profileRef.get()})}function setupPresence(dispatch,firebase){if(firebase.database&&firebase.database.ServerValue){var ref=firebase.database().ref(),_firebase$_3=firebase._,_firebase$_3$config=_firebase$_3.config,presence=_firebase$_3$config.presence,sessions=_firebase$_3$config.sessions,authUid=_firebase$_3.authUid,amOnline=ref.child(\".info/connected\"),onlineRef=ref.child(\"function\"==typeof presence?presence(firebase.auth().currentUser,firebase):presence).child(authUid),sessionsRef=\"function\"==typeof sessions?sessions(firebase.auth().currentUser,firebase):sessions;sessionsRef&&(sessionsRef=ref.child(sessions)),amOnline.on(\"value\",function(snapShot){if(snapShot.val()){if(sessionsRef){dispatch({type:_constants.actionTypes.SESSION_START,payload:authUid});var session=sessionsRef.push({startedAt:firebase.database.ServerValue.TIMESTAMP,user:authUid});\"function\"==typeof session.setPriority&&session.setPriority(authUid),session.child(\"endedAt\").onDisconnect().set(firebase.database.ServerValue.TIMESTAMP,function(){dispatch({type:_constants.actionTypes.SESSION_END})})}onlineRef.set(!0),onlineRef.onDisconnect().remove()}})}}\n"},"sourceMaps":{"js":{"version":3,"sources":["../../src/utils/auth.js"],"names":["createAuthProvider","firebase","providerName","scopes","toLowerCase","provider","auth","OAuthProvider","capitalProviderName","Error","customAuthParameters","_","config","setCustomParameters","addScope","Array","isArray","forEach","scope","String","getLoginMethodAndParams","credentials","email","password","type","token","phoneNumber","applicationVerifier","credential","credentialAuth","signInAndRetrieveDataWithCredential","method","params","indexOf","authProvider","tokenAuth","signInAndRetrieveDataWithCustomToken","signInWithEmailAndPassword","getReauthenticateMethodAndParams","reauthenticateAndRetrieveDataWithCredential","isAuthReady","store","stateName","state","getState","firebaseState","firebaseAuthState","isLoaded","authIsReady","Promise","resolve","unsubscribe","subscribe","createAuthIsReady","firebaseStateName","updateProfileOnRTDB","profileUpdate","authUid","profileRef","database","ref","userProfile","update","then","once","updateProfileOnFirestore","options","useSet","merge","firestore","doc","profileUpdatePromise","set","get","setupPresence","dispatch","ServerValue","presence","sessions","amOnline","child","onlineRef","currentUser","sessionsRef","on","snapShot","val","actionTypes","SESSION_START","payload","session","push","startedAt","TIMESTAMP","user","setPriority","onDisconnect","SESSION_END","remove"],"mappings":"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","sourcesContent":["import { capitalize } from 'lodash'\nimport { supportedAuthProviders, actionTypes } from '../constants'\n\n/**\n * @description Get correct login method and params order based on provided credentials\n * @param {object} firebase - Internal firebase object\n * @param {string} providerName - Name of Auth Provider (i.e. google, github, facebook, twitter)\n * @param {Array|string} scopes - List of scopes to add to auth provider\n * @returns {firebase.auth.AuthCredential} provider - Auth Provider\n * @private\n */\nfunction createAuthProvider(firebase, providerName, scopes) {\n  // TODO: Verify scopes are valid before adding\n  // TODO: Validate parameter inputs\n\n  if (providerName.toLowerCase() === 'microsoft.com') {\n    const provider = new firebase.auth.OAuthProvider('microsoft.com')\n    return provider\n  }\n\n  const capitalProviderName = `${capitalize(providerName)}AuthProvider`\n\n  // Throw if auth provider does not exist on Firebase instance\n  if (!firebase.auth[capitalProviderName]) {\n    throw new Error(\n      `${providerName} is not a valid auth provider for your firebase instance. If using react-native, use a RN specific auth library.`\n    )\n  }\n\n  const provider = new firebase.auth[capitalProviderName]()\n\n  // Custom Auth Parameters\n  // TODO: Validate parameter inputs\n  const { customAuthParameters } = firebase._.config\n  if (customAuthParameters && customAuthParameters[providerName]) {\n    provider.setCustomParameters(customAuthParameters[providerName])\n  }\n\n  // Handle providers without scopes\n  if (\n    providerName.toLowerCase() === 'twitter' ||\n    typeof provider.addScope !== 'function'\n  ) {\n    return provider\n  }\n\n  // TODO: Verify scopes are valid before adding\n  provider.addScope('email')\n\n  if (scopes) {\n    if (Array.isArray(scopes)) {\n      scopes.forEach((scope) => {\n        provider.addScope(scope)\n      })\n    }\n    // Add single scope if it is a string\n    if (typeof scopes === 'string' || scopes instanceof String) {\n      provider.addScope(scopes)\n    }\n  }\n\n  return provider\n}\n\n/**\n * Get correct login method and params order based on provided\n * credentials\n * @param {object} firebase - Internal firebase object\n * @param {object} credentials - Login credentials\n * @param {string} credentials.email - Email to login with (only needed for\n * email login)\n * @param {string} credentials.password - Password to login with (only needed\n * for email login)\n * @param {string} credentials.provider - Provider name such as google, twitter\n * (only needed for 3rd party provider login)\n * @param {string} credentials.type - Popup or redirect (only needed for 3rd\n * party provider login)\n * @param {string} credentials.token - Custom or provider token\n * @param {firebase.auth.AuthCredential} credentials.credential - Custom or\n * provider token\n * @param {Array|string} credentials.scopes - Scopes to add to provider\n * (i.e. email)\n * @returns {object} Method and params for calling login\n * @private\n */\nexport function getLoginMethodAndParams(firebase, credentials) {\n  const {\n    email,\n    password,\n    provider,\n    type,\n    token,\n    scopes,\n    phoneNumber,\n    applicationVerifier,\n    credential\n  } = credentials\n  // Credential Auth\n  if (credential) {\n    // Attempt to use signInAndRetrieveDataWithCredential if it exists (see #467 for more info)\n    const credentialAuth = firebase.auth().signInAndRetrieveDataWithCredential\n\n    if (credentialAuth) {\n      return {\n        method: 'signInAndRetrieveDataWithCredential',\n        params: [credential]\n      }\n    }\n    return { method: 'signInWithCredential', params: [credential] }\n  }\n\n  // Provider Auth\n  if (provider) {\n    // Verify providerName is valid\n    if (supportedAuthProviders.indexOf(provider.toLowerCase()) === -1) {\n      throw new Error(`${provider} is not a valid Auth Provider`)\n    }\n    if (token) {\n      throw new Error(\n        'provider with token no longer supported, use credential parameter instead'\n      )\n    }\n    const authProvider = createAuthProvider(firebase, provider, scopes)\n    if (type === 'popup') {\n      return { method: 'signInWithPopup', params: [authProvider] }\n    }\n    return { method: 'signInWithRedirect', params: [authProvider] }\n  }\n\n  // Token Auth\n  if (token) {\n    // Check for new sign in method (see #484 for more info)\n    const tokenAuth = firebase.auth().signInAndRetrieveDataWithCustomToken\n\n    if (tokenAuth) {\n      return { method: 'signInAndRetrieveDataWithCustomToken', params: [token] }\n    }\n\n    return { method: 'signInWithCustomToken', params: [token] }\n  }\n\n  // Phone Number Auth\n  if (phoneNumber) {\n    if (!applicationVerifier) {\n      throw new Error(\n        'Application verifier is required for phone authentication'\n      )\n    }\n    return {\n      method: 'signInWithPhoneNumber',\n      params: [phoneNumber, applicationVerifier]\n    }\n  }\n\n  // Check for new sign in method (see #484 for more info)\n  // Note: usage of signInAndRetrieveDataWithEmailAndPassword is now a fallback since it is deprecated (see #484 for more info)\n  if (!firebase.auth().signInWithEmailAndPassword) {\n    return {\n      method: 'signInAndRetrieveDataWithEmailAndPassword',\n      params: [email, password]\n    }\n  }\n\n  // Email/Password Auth\n  return { method: 'signInWithEmailAndPassword', params: [email, password] }\n}\n\n/**\n * Get correct reauthenticate method and params order based on provided\n * credentials\n * @param {object} firebase - Internal firebase object\n * @param {object} credentials - Login credentials\n * @param {string} credentials.provider - Provider name such as google, twitter\n * (only needed for 3rd party provider login)\n * @param {string} credentials.type - Popup or redirect (only needed for 3rd\n * party provider login)\n * @param {firebase.auth.AuthCredential} credentials.credential - Custom or\n * provider token\n * @param {Array|string} credentials.scopes - Scopes to add to provider\n * (i.e. email)\n * @returns {object} Method and params for calling login\n * @private\n */\nexport function getReauthenticateMethodAndParams(firebase, credentials) {\n  const {\n    provider,\n    type,\n    scopes,\n    phoneNumber,\n    applicationVerifier,\n    credential\n  } = credentials\n  // Credential Auth\n  if (credential) {\n    // Attempt to use signInAndRetrieveDataWithCredential if it exists (see #467 for more info)\n    const credentialAuth = firebase.auth()\n      .reauthenticateAndRetrieveDataWithCredential\n\n    if (credentialAuth) {\n      return {\n        method: 'reauthenticateAndRetrieveDataWithCredential',\n        params: [credential]\n      }\n    }\n    return { method: 'reauthenticateWithCredential', params: [credential] }\n  }\n\n  // Provider Auth\n  if (provider) {\n    // Verify providerName is valid\n    if (supportedAuthProviders.indexOf(provider.toLowerCase()) === -1) {\n      throw new Error(`${provider} is not a valid Auth Provider`)\n    }\n    const authProvider = createAuthProvider(firebase, provider, scopes)\n    if (type === 'popup') {\n      return { method: 'reauthenticateWithPopup', params: [authProvider] }\n    }\n    return { method: 'reauthenticateWithRedirect', params: [authProvider] }\n  }\n\n  // Phone Number Auth\n  if (!applicationVerifier) {\n    throw new Error('Application verifier is required for phone authentication')\n  }\n  return {\n    method: 'reauthenticateWithPhoneNumber',\n    params: [phoneNumber, applicationVerifier]\n  }\n}\n\n/**\n * Returns a promise that completes when Firebase Auth is ready in the given\n * store using react-redux-firebase.\n * @param {object} store - The Redux store on which we want to detect if\n * Firebase auth is ready.\n * @param {string} [stateName='firebase'] - The attribute name of the\n * react-redux-firebase reducer when using multiple combined reducers.\n * 'firebase' by default. Set this to `null` to indicate that the\n * react-redux-firebase reducer is not in a combined reducer.\n * @returns {Promise} Resolves when Firebase auth is ready in the store.\n */\nfunction isAuthReady(store, stateName) {\n  const state = store.getState()\n  const firebaseState = stateName ? state[stateName] : state\n  const firebaseAuthState = firebaseState && firebaseState.auth\n  if (!firebaseAuthState) {\n    throw new Error(\n      `The Firebase auth state could not be found in the store under the attribute '${\n        stateName ? `${stateName}.` : ''\n      }auth'. Make sure your react-redux-firebase reducer is correctly set in the store`\n    )\n  }\n  return firebaseState.auth.isLoaded\n}\n\n/**\n * Returns a promise that completes when Firebase Auth is ready in the given\n * store using react-redux-firebase.\n * @param {object} store - The Redux store on which we want to detect if\n * Firebase auth is ready.\n * @param {string} [stateName='firebase'] - The attribute name of the react-redux-firebase\n * reducer when using multiple combined reducers. 'firebase' by default. Set\n * this to `null` to indicate that the react-redux-firebase reducer is not in a\n * combined reducer.\n * @returns {Promise} Resolve when Firebase auth is ready in the store.\n */\nexport function authIsReady(store, stateName = 'firebase') {\n  return new Promise((resolve) => {\n    if (isAuthReady(store, stateName)) {\n      resolve()\n    } else {\n      const unsubscribe = store.subscribe(() => {\n        if (isAuthReady(store, stateName)) {\n          unsubscribe()\n          resolve()\n        }\n      })\n    }\n  })\n}\n\n/**\n * Function that creates and authIsReady promise\n * @param {object} store - The Redux store on which we want to detect if\n * Firebase auth is ready.\n * @param {object} config - Config options for authIsReady\n * @param {string} config.authIsReady - Config options for authIsReady\n * @param {string} config.firebaseStateName - Config options for authIsReady\n * @returns {Promise} Resolves when Firebase auth is ready in the store.\n */\nexport function createAuthIsReady(store, config) {\n  return typeof config.authIsReady === 'function'\n    ? config.authIsReady(store, config)\n    : authIsReady(store, config.firebaseStateName)\n}\n\n/**\n * Update profile data on Firebase Real Time Database\n * @param {object} firebase - internal firebase object\n * @param {object} profileUpdate - Updates to profile object\n * @returns {Promise} Resolves with results of profile get\n */\nexport function updateProfileOnRTDB(firebase, profileUpdate) {\n  const {\n    _: { config, authUid }\n  } = firebase\n  const profileRef = firebase.database().ref(`${config.userProfile}/${authUid}`)\n  return profileRef.update(profileUpdate).then(() => profileRef.once('value'))\n}\n\n/**\n * Update profile data on Firestore by calling set (with merge: true) on\n * the profile.\n * @param {object} firebase - internal firebase object\n * @param {object} profileUpdate - Updates to profile object\n * @param {object} options - Options object for configuring how profile\n * update occurs\n * @param {boolean} [options.useSet=true] - Use set with merge instead of\n * update. Setting to `false` uses update (can cause issue of profile document\n * does not exist).\n * @param {boolean} [options.merge=true] - Whether or not to use merge when\n * setting profile\n * @returns {Promise} Resolves with results of profile get\n */\nexport function updateProfileOnFirestore(\n  firebase,\n  profileUpdate,\n  options = {}\n) {\n  const { useSet = true, merge = true } = options\n  const {\n    firestore,\n    _: { config, authUid }\n  } = firebase\n  const profileRef = firestore().doc(`${config.userProfile}/${authUid}`)\n  // Use set with merge (to prevent \"No document to update\") unless otherwise\n  // specificed through options\n  const profileUpdatePromise = useSet\n    ? profileRef.set(profileUpdate, { merge })\n    : profileRef.update(profileUpdate)\n  return profileUpdatePromise.then(() => profileRef.get())\n}\n\n/**\n * Start presence management for a specificed user uid.\n * Presence collection contains a list of users that are online currently.\n * Sessions collection contains a record of all user sessions.\n * This function is called within login functions if enablePresence: true.\n * @param {Function} dispatch - Action dispatch function\n * @param {object} firebase - Internal firebase object\n * @private\n */\nexport function setupPresence(dispatch, firebase) {\n  // exit if database does not exist on firebase instance\n  if (!firebase.database || !firebase.database.ServerValue) {\n    return\n  }\n  const ref = firebase.database().ref()\n  const {\n    config: { presence, sessions },\n    authUid\n  } = firebase._\n  const amOnline = ref.child('.info/connected')\n  const onlineRef = ref\n    .child(\n      typeof presence === 'function'\n        ? presence(firebase.auth().currentUser, firebase)\n        : presence\n    )\n    .child(authUid)\n  let sessionsRef =\n    typeof sessions === 'function'\n      ? sessions(firebase.auth().currentUser, firebase)\n      : sessions\n  if (sessionsRef) {\n    sessionsRef = ref.child(sessions)\n  }\n  amOnline.on('value', (snapShot) => {\n    if (!snapShot.val()) return\n    // user is online\n    if (sessionsRef) {\n      // add session and set disconnect\n      dispatch({ type: actionTypes.SESSION_START, payload: authUid })\n      // add new session to sessions collection\n      const session = sessionsRef.push({\n        startedAt: firebase.database.ServerValue.TIMESTAMP,\n        user: authUid\n      })\n      // Support versions of react-native-firebase that do not have setPriority\n      // on firebase.database.ThenableReference\n      if (typeof session.setPriority === 'function') {\n        // set authUid as priority for easy sorting\n        session.setPriority(authUid)\n      }\n      session\n        .child('endedAt')\n        .onDisconnect()\n        .set(firebase.database.ServerValue.TIMESTAMP, () => {\n          dispatch({ type: actionTypes.SESSION_END })\n        })\n    }\n    // add correct session id to user\n    // remove from presence list\n    onlineRef.set(true)\n    onlineRef.onDisconnect().remove()\n  })\n}\n"],"file":"auth.js"}},"error":null,"hash":"5c1053d5d6aad6b580da66943c63431e","cacheData":{"env":{}}}