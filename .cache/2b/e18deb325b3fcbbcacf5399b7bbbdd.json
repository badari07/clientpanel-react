{"id":"../node_modules/react-redux-firebase/es/useFirestoreConnect.js","dependencies":[{"name":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/useFirestoreConnect.js.map","includedInParent":true,"mtime":1586117797040},{"name":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/package.json","includedInParent":true,"mtime":1586252746660},{"name":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/.babelrc","includedInParent":true,"mtime":1586188670110},{"name":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/package.json","includedInParent":true,"mtime":1586117798920},{"name":"lodash/isEqual","loc":{"line":1,"column":149},"parent":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/useFirestoreConnect.js","resolved":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/lodash/isEqual.js"},{"name":"react","loc":{"line":1,"column":183},"parent":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/useFirestoreConnect.js","resolved":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react/index.js"},{"name":"./utils","loc":{"line":1,"column":207},"parent":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/useFirestoreConnect.js","resolved":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/utils/index.js"},{"name":"./useFirestore","loc":{"line":1,"column":263},"parent":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/useFirestoreConnect.js","resolved":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/useFirestore.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=useFirestoreConnect;var _isEqual2=_interopRequireDefault(require(\"lodash/isEqual\")),_react=require(\"react\"),_utils=require(\"./utils\"),_useFirestore=_interopRequireDefault(require(\"./useFirestore\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function useFirestoreConnect(queriesConfigs){var firestore=(0,_useFirestore.default)(),firestoreIsEnabled=!!firestore,queryRef=(0,_react.useRef)(),data=(0,_react.useMemo)(function(){return(0,_utils.invokeArrayQuery)(queriesConfigs)},[queriesConfigs]);(0,_react.useEffect)(function(){if(firestoreIsEnabled&&!(0,_isEqual2.default)(data,queryRef.current)){var changes=(0,_utils.getChanges)(data,queryRef.current);queryRef.current=data,firestore.unsetListeners(changes.removed),firestore.setListeners(changes.added)}},[data]),(0,_react.useEffect)(function(){return function(){firestoreIsEnabled&&queryRef.current&&firestore.unsetListeners(queryRef.current)}},[])}module.exports=exports.default;\n"},"sourceMaps":{"js":{"version":3,"sources":["../src/useFirestoreConnect.js"],"names":["useFirestoreConnect","queriesConfigs","firestore","firestoreIsEnabled","queryRef","data","current","changes","unsetListeners","removed","setListeners","added"],"mappings":"4WAgDe,QAASA,CAAAA,mBAAT,CAA6BC,cAA7B,CAA6C,IACpDC,CAAAA,SAAS,CAAG,2BADwC,CAEpDC,kBAAkB,CAAG,CAAC,CAACD,SAF6B,CAGpDE,QAAQ,CAAG,mBAHyC,CAKpDC,IAAI,CAAG,mBAAQ,iBAAM,4BAAiBJ,cAAjB,CAAN,CAAR,CAAgD,CAACA,cAAD,CAAhD,CAL6C,CAO1D,qBAAU,UAAM,CACd,GAAIE,kBAAkB,EAAI,CAAC,sBAAQE,IAAR,CAAcD,QAAQ,CAACE,OAAvB,CAA3B,CAA4D,CAC1D,GAAMC,CAAAA,OAAO,CAAG,sBAAWF,IAAX,CAAiBD,QAAQ,CAACE,OAA1B,CAAhB,CAEAF,QAAQ,CAACE,OAAT,CAAmBD,IAHuC,CAM1DH,SAAS,CAACM,cAAV,CAAyBD,OAAO,CAACE,OAAjC,CAN0D,CAS1DP,SAAS,CAACQ,YAAV,CAAuBH,OAAO,CAACI,KAA/B,CACD,CACF,CAZD,CAYG,CAACN,IAAD,CAZH,CAP0D,CAsB1D,qBAAU,UAAM,CACd,MAAO,WAAM,CACPF,kBAAkB,EAAIC,QAAQ,CAACE,OADxB,EAETJ,SAAS,CAACM,cAAV,CAAyBJ,QAAQ,CAACE,OAAlC,CAEH,CACF,CAND,CAMG,EANH,CAOD,C","sourcesContent":["import { isEqual } from 'lodash'\nimport { useRef, useMemo, useEffect } from 'react'\nimport { invokeArrayQuery, getChanges } from './utils'\nimport useFirestore from './useFirestore'\n\n/**\n * @description React hook that automatically listens/unListens\n * to provided Cloud Firestore paths. Make sure you have required/imported\n * Cloud Firestore, including it's reducer, before attempting to use.\n * **Note** Populate is not yet supported.\n * @param {object|string|Array|Function} queriesConfigs - An object, string,\n * or array of object or string for paths to sync from firestore. Can also be\n * a function that returns the object, string, or array of object or string.\n * @see https://react-redux-firebase.com/docs/api/useFirestoreConnect.html\n * @example <caption>Basic</caption>\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n * import { useFirestoreConnect } from 'react-redux-firebase'\n *\n * export default function TodosList() {\n *   useFirestoreConnect('todos') // sync todos collection from Firestore into redux\n *   const todos = useSelector(state => state.firestore.data.todos)\n *   return (\n *     <ul>\n *       {todos &&\n *         todos.map((todo) => (\n *           <li>id: {todo.id} todo: {todo.description}</li>\n *         ))}\n *    </ul>\n *   )\n * }\n * @example <caption>Object as query</caption>\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n * import { useFirestoreConnect } from 'react-redux-firebase'\n *\n * export default function TodoItem({ todoId }) {\n *   useFirestoreConnect([{\n *     collection: 'todos',\n *     doc: todoId\n *   }])\n *   const todo = useSelector(\n *     ({ firestore: { data } }) => data.todos && data.todos[todoId]\n *   )\n *\n *   return <div>{JSON.stringify(todo)}</div>\n * }\n */\nexport default function useFirestoreConnect(queriesConfigs) {\n  const firestore = useFirestore()\n  const firestoreIsEnabled = !!firestore\n  const queryRef = useRef()\n\n  const data = useMemo(() => invokeArrayQuery(queriesConfigs), [queriesConfigs])\n\n  useEffect(() => {\n    if (firestoreIsEnabled && !isEqual(data, queryRef.current)) {\n      const changes = getChanges(data, queryRef.current)\n\n      queryRef.current = data\n\n      // Remove listeners for inactive subscriptions\n      firestore.unsetListeners(changes.removed)\n\n      // Add listeners for new subscriptions\n      firestore.setListeners(changes.added)\n    }\n  }, [data])\n\n  // Emulate componentWillUnmount\n  useEffect(() => {\n    return () => {\n      if (firestoreIsEnabled && queryRef.current) {\n        firestore.unsetListeners(queryRef.current)\n      }\n    }\n  }, [])\n}\n"],"file":"useFirestoreConnect.js"}},"error":null,"hash":"4e66f7f2615e2ad726ac006256193ac5","cacheData":{"env":{}}}