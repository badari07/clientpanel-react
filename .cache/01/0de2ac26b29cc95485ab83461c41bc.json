{"id":"../node_modules/react-redux-firebase/es/useFirebaseConnect.js","dependencies":[{"name":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/useFirebaseConnect.js.map","includedInParent":true,"mtime":1586117797030},{"name":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/package.json","includedInParent":true,"mtime":1586156594090},{"name":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/package.json","includedInParent":true,"mtime":1586117798920},{"name":"lodash/differenceWith","loc":{"line":1,"column":155},"parent":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/useFirebaseConnect.js","resolved":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/lodash/differenceWith.js"},{"name":"lodash/isEqual","loc":{"line":1,"column":222},"parent":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/useFirebaseConnect.js","resolved":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/lodash/isEqual.js"},{"name":"react","loc":{"line":1,"column":256},"parent":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/useFirebaseConnect.js","resolved":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react/index.js"},{"name":"./actions/query","loc":{"line":1,"column":280},"parent":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/useFirebaseConnect.js","resolved":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/actions/query.js"},{"name":"./utils","loc":{"line":1,"column":314},"parent":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/useFirebaseConnect.js","resolved":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/utils/index.js"},{"name":"./useFirebase","loc":{"line":1,"column":369},"parent":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/useFirebaseConnect.js","resolved":"/Volumes/Baddy-T5/front end/FE-2018/react_js/brad_trvesy/clientpanel-react/node_modules/react-redux-firebase/es/useFirebase.js"}],"generated":{"js":"\"use strict\";Object.defineProperty(exports,\"__esModule\",{value:!0}),exports.default=useFirebaseConnect;var _differenceWith2=_interopRequireDefault(require(\"lodash/differenceWith\")),_isEqual2=_interopRequireDefault(require(\"lodash/isEqual\")),_react=require(\"react\"),_query=require(\"./actions/query\"),_utils=require(\"./utils\"),_useFirebase=_interopRequireDefault(require(\"./useFirebase\"));function _interopRequireDefault(obj){return obj&&obj.__esModule?obj:{default:obj}}function useFirebaseConnect(queriesConfig){var firebase=(0,_useFirebase.default)(),eventRef=(0,_react.useRef)(),dataRef=(0,_react.useRef)(),data=(0,_react.useMemo)(function(){return(0,_utils.invokeArrayQuery)(queriesConfig)},[queriesConfig]);(0,_react.useEffect)(function(){if(null!==data&&!(0,_isEqual2.default)(data,dataRef.current)){var itemsToSubscribe=(0,_differenceWith2.default)(data,dataRef.current,_isEqual2.default),itemsToUnsubscribe=(0,_differenceWith2.default)(dataRef.current,data,_isEqual2.default);dataRef.current=data,(0,_query.unWatchEvents)(firebase,firebase.dispatch,(0,_utils.getEventsFromInput)(itemsToUnsubscribe)),eventRef.current=(0,_utils.getEventsFromInput)(data),(0,_query.watchEvents)(firebase,firebase.dispatch,(0,_utils.getEventsFromInput)(itemsToSubscribe))}},[data]),(0,_react.useEffect)(function(){return function(){(0,_query.unWatchEvents)(firebase,firebase.dispatch,eventRef.current)}},[])}module.exports=exports.default;\n"},"sourceMaps":{"js":{"version":3,"sources":["../src/useFirebaseConnect.js"],"names":["useFirebaseConnect","queriesConfig","firebase","eventRef","dataRef","data","current","itemsToSubscribe","itemsToUnsubscribe","dispatch"],"mappings":"qdA+De,QAASA,CAAAA,kBAAT,CAA4BC,aAA5B,CAA2C,IAClDC,CAAAA,QAAQ,CAAG,0BADuC,CAElDC,QAAQ,CAAG,mBAFuC,CAGlDC,OAAO,CAAG,mBAHwC,CAKlDC,IAAI,CAAG,mBAAQ,iBAAM,4BAAiBJ,aAAjB,CAAN,CAAR,CAA+C,CAACA,aAAD,CAA/C,CAL2C,CAOxD,qBAAU,UAAM,CACd,GAAa,IAAT,GAAAI,IAAI,EAAa,CAAC,sBAAQA,IAAR,CAAcD,OAAO,CAACE,OAAtB,CAAtB,CAAsD,IAC9CC,CAAAA,gBAAgB,CAAG,6BAAeF,IAAf,CAAqBD,OAAO,CAACE,OAA7B,mBAD2B,CAE9CE,kBAAkB,CAAG,6BAAeJ,OAAO,CAACE,OAAvB,CAAgCD,IAAhC,mBAFyB,CAIpDD,OAAO,CAACE,OAAR,CAAkBD,IAJkC,CAMpD,yBACEH,QADF,CAEEA,QAAQ,CAACO,QAFX,CAGE,8BAAmBD,kBAAnB,CAHF,CANoD,CAYpDL,QAAQ,CAACG,OAAT,CAAmB,8BAAmBD,IAAnB,CAZiC,CAepD,uBACEH,QADF,CAEEA,QAAQ,CAACO,QAFX,CAGE,8BAAmBF,gBAAnB,CAHF,CAKD,CACF,CAtBD,CAsBG,CAACF,IAAD,CAtBH,CAPwD,CAgCxD,qBAAU,UAAM,CACd,MAAO,WAAM,CACX,yBAAcH,QAAd,CAAwBA,QAAQ,CAACO,QAAjC,CAA2CN,QAAQ,CAACG,OAApD,CACD,CACF,CAJD,CAIG,EAJH,CAKD,C","sourcesContent":["import { isEqual, differenceWith } from 'lodash'\nimport { useMemo, useEffect, useRef } from 'react'\nimport { watchEvents, unWatchEvents } from './actions/query'\nimport { getEventsFromInput, invokeArrayQuery } from './utils'\nimport useFirebase from './useFirebase'\n\n/**\n * @description Hook that automatically listens/unListens to provided firebase paths\n * using React's useEffect hook.\n * @param {object|string|Function|Array} queriesConfig - Object, string, or\n * array contains object or string for path to sync from Firebase or null if\n * hook doesn't need to sync. Can also be a function that returns an object,\n * a path string, or array of an object or a path string.\n * @see https://react-redux-firebase.com/docs/api/useFirebaseConnect.html\n * @example <caption>Ordered Data</caption>\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n * import { useFirebaseConnect } from 'react-redux-firebase'\n *\n * export default function Todos() {\n *   // sync /todos from firebase into redux\n *   useFirebaseConnect('todos')\n *   // Connect to redux state using selector hook\n *   const todos = useSelector(state => state.firebase.data.todos)\n *   return (\n *     <div>\n *       {JSON.stringify(todos, null, 2)}\n *     </div>\n *   )\n * }\n * @example <caption>Data that depends on props</caption>\n * import React from 'react'\n * import { compose } from 'redux'\n * import { useSelector } from 'react-redux'\n * import { useFirebaseConnect } from 'react-redux-firebase'\n *\n * export default function Post({ postId }) {\n *   useFirebaseConnect(`posts/${postId}`) // sync /posts/postId from firebase into redux\n *   const post = useSelector(({ firebase: { ordered: { posts } } }) => posts && posts[postId])\n *   return (\n *     <div>\n *       {JSON.stringify(post, null, 2)}\n *     </div>\n *   )\n * }\n * @example <caption>Data that depends on props, an array as a query</caption>\n * import React from 'react'\n * import { compose } from 'redux'\n * import { useSelector } from 'react-redux'\n * import { useFirebaseConnect, getVal } from 'react-redux-firebase'\n *\n * export default function Post({ postId }) {\n *   useFirebaseConnect([`posts/${postId}`], [postId]) // sync /posts/postId from firebase into redux\n *   const post = useSelector(state => {\n *     return state.firebase.ordered.posts && state.firebase.ordered.posts[postId]\n *   })\n *   return (\n *     <div>\n *       {JSON.stringify(post, null, 2)}\n *     </div>\n *   )\n * }\n */\nexport default function useFirebaseConnect(queriesConfig) {\n  const firebase = useFirebase()\n  const eventRef = useRef()\n  const dataRef = useRef()\n\n  const data = useMemo(() => invokeArrayQuery(queriesConfig), [queriesConfig])\n\n  useEffect(() => {\n    if (data !== null && !isEqual(data, dataRef.current)) {\n      const itemsToSubscribe = differenceWith(data, dataRef.current, isEqual)\n      const itemsToUnsubscribe = differenceWith(dataRef.current, data, isEqual)\n\n      dataRef.current = data\n      // UnWatch all current events\n      unWatchEvents(\n        firebase,\n        firebase.dispatch,\n        getEventsFromInput(itemsToUnsubscribe)\n      )\n      // Get watch events from new data\n      eventRef.current = getEventsFromInput(data)\n\n      // Watch new events\n      watchEvents(\n        firebase,\n        firebase.dispatch,\n        getEventsFromInput(itemsToSubscribe)\n      )\n    }\n  }, [data])\n\n  // Emulate componentWillUnmount\n  useEffect(() => {\n    return () => {\n      unWatchEvents(firebase, firebase.dispatch, eventRef.current)\n    }\n  }, [])\n}\n"],"file":"useFirebaseConnect.js"}},"error":null,"hash":"501f3656be7eed0fea97eb7165ed2383","cacheData":{"env":{}}}